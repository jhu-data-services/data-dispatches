[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "dispatches/data-visualization/custom-ggplot2-theme.html",
    "href": "dispatches/data-visualization/custom-ggplot2-theme.html",
    "title": "Building a custom ggplot2 theme",
    "section": "",
    "text": "In this dispatch we will learn how to build your own custom theme in ggplot2. This is useful if you want your figures to use a consistent style.\nMaybe you frequently submit to a specific journal which has an explicit style guide, and you want to ensure your figures are consistent with that style guide.\nIt can be a lot of work, and a lot of code to get the aesthetics of your ggplot2 figure just right. Instead of changing the font type, size, coloring, etc. every time you create a plot, just create a theme, that can then be applied to every new figure you create!\nLet’s create a plot using the default style in ggplot2, and explore some of the default themes to get a better understanding of what a ggplot2 theme looks like, and how it’s structured."
  },
  {
    "objectID": "dispatches/data-visualization/custom-ggplot2-theme.html#setup",
    "href": "dispatches/data-visualization/custom-ggplot2-theme.html#setup",
    "title": "Building a custom ggplot2 theme",
    "section": "Setup",
    "text": "Setup\nWe will be using the Palmer Penguins dataset for this dispatch. To install the Palmer Penguins package, run install.packages(\"palmerpenguins\").\nIf you have not already installed ggplot2, do so with install.packages(\"ggplot2\"), or install the entire tidyverse with install.packages(\"tidyverse\").\n\nLoad the Data\nNow load our two libraries:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n\nExplore the Data\nWe are using the palmerpenguins package for our data during this dispatch. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data were conveniently collected as an R package that we use today.\n\nWe can get a sense of the contents of our data by looking at the first few rows of our tibble. Remember tibbles are data.frames, just with a few behavioral changes. The palmerpenguins data is in a tibble format by default.\n\ndata(package = 'palmerpenguins')\n\n# Remove rows that contain at least one missing value\npenguins <- penguins %>%\n            drop_na()\n\nprint(penguins)\n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# … with 323 more rows, and 2 more variables: sex <fct>, year <int>"
  },
  {
    "objectID": "dispatches/data-visualization/custom-ggplot2-theme.html#themes",
    "href": "dispatches/data-visualization/custom-ggplot2-theme.html#themes",
    "title": "Building a custom ggplot2 theme",
    "section": "Themes",
    "text": "Themes\nLet’s look at a few themes before we build our own. We can use these themes as a starting place.\n\nDefault theme\nThe default theme is theme_gray(). This is the theme that is used when you call ggplot without specifying a theme.\nWhen we compare penguin flipper length to penguin body mass by species the plot created uses theme_gray():\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\")\n\n\n\n\nWe can explicitly add the theme and see that nothing changes:\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_grey()\n\n\n\n\n\n\nChanging theme\nBut if we change the theme, we see our scatter plot change accordingly. Let’s use theme_minimal():\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_minimal()\n\n\n\n\n\n\nAvailable themes\nThere are a number of themes available in ggplot2:\n\n\n\n\n\n\n\nTheme\nDescription\n\n\n\n\ntheme_gray()\nThe signature ggplot2 theme with a grey background and white gridlines, designed to put the data forward yet make comparisons easy.\n\n\ntheme_bw()\nThe classic dark-on-light ggplot2 theme. May work better for presentations displayed with a projector.\n\n\ntheme_linedraw()\nA theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. Serves a purpose similar to theme_bw(). Note that this theme has some very thin lines (<< 1 pt) which some journals may refuse.\n\n\ntheme_light()\nA theme similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data.\n\n\ntheme_dark()\nThe dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin coloured lines pop out.\n\n\ntheme_minimal()\nA minimalistic theme with no background annotations.\n\n\ntheme_classic()\nA classic-looking theme, with x and y axis lines and no gridlines.\n\n\ntheme_void()\nA completely empty theme.\n\n\ntheme_test()\nA theme for visual unit tests. It should ideally never change except for new features."
  },
  {
    "objectID": "dispatches/data-visualization/custom-ggplot2-theme.html#customizing-a-theme",
    "href": "dispatches/data-visualization/custom-ggplot2-theme.html#customizing-a-theme",
    "title": "Building a custom ggplot2 theme",
    "section": "Customizing a theme",
    "text": "Customizing a theme\nEach of the previous theme changes different aesthetics of the theme. We can specify our own using a custom theme. For a list of parameters that we can change, check out the theme help with ?theme or review the documentation on ggplot2 theming:\n\n\n\n\n\nUnderstanding theme contents\nLet’s look at the theme_minimal() function, and see what arguments are defined for the different theme parameters:\n\ntheme_minimal\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    theme_bw(base_size = base_size, base_family = base_family, \n        base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% \n        theme(axis.ticks = element_blank(), legend.background = element_blank(), \n            legend.key = element_blank(), panel.background = element_blank(), \n            panel.border = element_blank(), strip.background = element_blank(), \n            plot.background = element_blank(), complete = TRUE)\n}\n<bytecode: 0x00000206a260e6a0>\n<environment: namespace:ggplot2>\n\n\nInteresting! We can see that theme_minimal() just builds on and modifies theme_bw().\nWhat would we find if we look at theme_bw()?\n\ntheme_bw\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    theme_grey(base_size = base_size, base_family = base_family, \n        base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% \n        theme(panel.background = element_rect(fill = \"white\", \n            colour = NA), panel.border = element_rect(fill = NA, \n            colour = \"grey20\"), panel.grid = element_line(colour = \"grey92\"), \n            panel.grid.minor = element_line(size = rel(0.5)), \n            strip.background = element_rect(fill = \"grey85\", \n                colour = \"grey20\"), legend.key = element_rect(fill = \"white\", \n                colour = NA), complete = TRUE)\n}\n<bytecode: 0x00000206a2611168>\n<environment: namespace:ggplot2>\n\n\ntheme_bw() builds on and modifies theme_grey(). Clearly a pattern is emerging where each ggplot2 theme modifies and builds on another.\nAnd what if we keep going down the rabbit hole and look at theme_grey()?\n\ntheme_grey\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    half_line <- base_size/2\n    t <- theme(line = element_line(colour = \"black\", size = base_line_size, \n        linetype = 1, lineend = \"butt\"), rect = element_rect(fill = \"white\", \n        colour = \"black\", size = base_rect_size, linetype = 1), \n        text = element_text(family = base_family, face = \"plain\", \n            colour = \"black\", size = base_size, lineheight = 0.9, \n            hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), \n            debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, \n        axis.line.y = NULL, axis.text = element_text(size = rel(0.8), \n            colour = \"grey30\"), axis.text.x = element_text(margin = margin(t = 0.8 * \n            half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * \n            half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * \n            half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * \n            half_line/2), hjust = 0), axis.ticks = element_line(colour = \"grey20\"), \n        axis.ticks.length = unit(half_line/2, \"pt\"), axis.ticks.length.x = NULL, \n        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, \n        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, \n        axis.ticks.length.y.right = NULL, axis.title.x = element_text(margin = margin(t = half_line/2), \n            vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line/2), \n            vjust = 0), axis.title.y = element_text(angle = 90, \n            margin = margin(r = half_line/2), vjust = 1), axis.title.y.right = element_text(angle = -90, \n            margin = margin(l = half_line/2), vjust = 0), legend.background = element_rect(colour = NA), \n        legend.spacing = unit(2 * half_line, \"pt\"), legend.spacing.x = NULL, \n        legend.spacing.y = NULL, legend.margin = margin(half_line, \n            half_line, half_line, half_line), legend.key = element_rect(fill = \"grey95\", \n            colour = NA), legend.key.size = unit(1.2, \"lines\"), \n        legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), \n        legend.text.align = NULL, legend.title = element_text(hjust = 0), \n        legend.title.align = NULL, legend.position = \"right\", \n        legend.direction = NULL, legend.justification = \"center\", \n        legend.box = NULL, legend.box.margin = margin(0, 0, 0, \n            0, \"cm\"), legend.box.background = element_blank(), \n        legend.box.spacing = unit(2 * half_line, \"pt\"), panel.background = element_rect(fill = \"grey92\", \n            colour = NA), panel.border = element_blank(), panel.grid = element_line(colour = \"white\"), \n        panel.grid.minor = element_line(size = rel(0.5)), panel.spacing = unit(half_line, \n            \"pt\"), panel.spacing.x = NULL, panel.spacing.y = NULL, \n        panel.ontop = FALSE, strip.background = element_rect(fill = \"grey85\", \n            colour = NA), strip.text = element_text(colour = \"grey10\", \n            size = rel(0.8), margin = margin(0.8 * half_line, \n                0.8 * half_line, 0.8 * half_line, 0.8 * half_line)), \n        strip.text.x = NULL, strip.text.y = element_text(angle = -90), \n        strip.text.y.left = element_text(angle = 90), strip.placement = \"inside\", \n        strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(half_line/2, \n            \"pt\"), strip.switch.pad.wrap = unit(half_line/2, \n            \"pt\"), plot.background = element_rect(colour = \"white\"), \n        plot.title = element_text(size = rel(1.2), hjust = 0, \n            vjust = 1, margin = margin(b = half_line)), plot.title.position = \"panel\", \n        plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)), \n        plot.caption = element_text(size = rel(0.8), hjust = 1, \n            vjust = 1, margin = margin(t = half_line)), plot.caption.position = \"panel\", \n        plot.tag = element_text(size = rel(1.2), hjust = 0.5, \n            vjust = 0.5), plot.tag.position = \"topleft\", plot.margin = margin(half_line, \n            half_line, half_line, half_line), complete = TRUE)\n    ggplot_global$theme_all_null %+replace% t\n}\n<bytecode: 0x000002069e1d4ca0>\n<environment: namespace:ggplot2>\n\n\nWe have reached the bottom of the rabbit hole with theme_grey(). This theme explicitly specifies all of the theme arguments (of which there are many).\n\nThis explains why all of the other themes build on each other, it is much more concise to only use a theme where all the arguments are already defined, and only change those theme arguments that you want to look different than the theme you are building on.\n\n\nCopying and modifying a theme\nLet’s begin to build a custom theme, and explore different arguments as we do. First lets create a new theme, theme_custom(), that is simply a wrapper to theme minimal:\n\ntheme_custom <- function()\n{\n  theme_minimal()\n}\n\nWe can call our theme:\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_custom()\n\n\n\n\nAnd we see that we get the same output as when we use theme_minimal()."
  },
  {
    "objectID": "dispatches/data-visualization/distributions-ggplot2.html",
    "href": "dispatches/data-visualization/distributions-ggplot2.html",
    "title": "Tutorials",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to Data Dispatches, the online portal for JHU Data Services data tutorials. Here you will find short tutorials, primarily in R and Python, on a number of data related topics including access, cleaning, analysis, and visualization.\nTopics are organized into themes, with individual topics called dispatches.\n\nWhat’s a Dispatch?\nDispatches are short tutorials on a number of data subjects. Use the navigation on the left to find tutorials of interest, or use the search function in the top of the sidebar.\n\n\n\nTopic\nDescription\n\n\n\n\n📊 Data Visualization\nTopics in Data Visualization, primarily in the R library ggplot2\n\n\n👩🏻‍💻 API Guides\nAPI examples for common open data sources and JHU databases\n\n\n\n\n\n\n\n\n\n\n\n\n\nNew dispatches are added frequently, so check back regularly for new tutorials!\n\n\n\n\n\n\n\n\nAbout Data Services"
  },
  {
    "objectID": "dispatches/data-visualization/visualizing-clusters.html",
    "href": "dispatches/data-visualization/visualizing-clusters.html",
    "title": "Visualizing Clusters",
    "section": "",
    "text": "library(palmerpenguins)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(magrittr)"
  },
  {
    "objectID": "dispatches/data-visualization/visualizing-clusters.html#visualizing-clusters-with-a-convex-hull",
    "href": "dispatches/data-visualization/visualizing-clusters.html#visualizing-clusters-with-a-convex-hull",
    "title": "Visualizing Clusters",
    "section": "Visualizing clusters with a convex hull",
    "text": "Visualizing clusters with a convex hull\n\npenguins %<>% filter_at(vars(bill_length_mm, body_mass_g), all_vars(!is.na(.)))\n\npenguin_hull <- penguins %>%\n  group_by(species) %>%\n  slice(chull(bill_length_mm, body_mass_g))\n\nggplot(data = penguins,\n       aes(x = bill_length_mm,\n           y = body_mass_g,\n           color = species,\n           labels = species)) +\n  geom_point(size = 2) +\n  geom_polygon(\n    data = penguin_hull,\n    aes(x = bill_length_mm,\n        y = body_mass_g,\n        fill = species),\n    alpha = 0.5,\n    show.legend = FALSE\n  ) +\n  xlab(\"Bill Length (mm)\") +\n  ylab(\"Body Mass (g)\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "dispatches/data-visualization/order-by-multiple-variables.html",
    "href": "dispatches/data-visualization/order-by-multiple-variables.html",
    "title": "Ordering a ggplot2 barplot by multiple variables",
    "section": "",
    "text": "Sometimes you would like to order your barplots by multiple variables. For example, you would like to sort by a categorical variable, and then within each categorical variable sort by a continuous variable. Let’s take a look at an example:\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(forcats)\n\n\nstarwars %>% \n  group_by(homeworld) %>% \n  count() %>% \n  arrange(-n)\n\n# A tibble: 49 × 2\n# Groups:   homeworld [49]\n   homeworld     n\n   <chr>     <int>\n 1 Naboo        11\n 2 Tatooine     10\n 3 <NA>         10\n 4 Alderaan      3\n 5 Coruscant     3\n 6 Kamino        3\n 7 Corellia      2\n 8 Kashyyyk      2\n 9 Mirial        2\n10 Ryloth        2\n# … with 39 more rows\n\nstarwars %>% \n  filter(is.na(homeworld))\n\n# A tibble: 10 × 14\n   name        height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n   <chr>        <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n 1 Yoda            66    17 white   green   brown       896 male  mascu… <NA>   \n 2 IG-88          200   140 none    metal   red          15 none  mascu… <NA>   \n 3 Arvel Cryn…     NA    NA brown   fair    brown        NA male  mascu… <NA>   \n 4 Qui-Gon Ji…    193    89 brown   fair    blue         92 male  mascu… <NA>   \n 5 R4-P17          96    NA none    silver… red, b…      NA none  femin… <NA>   \n 6 Finn            NA    NA black   dark    dark         NA male  mascu… <NA>   \n 7 Rey             NA    NA brown   light   hazel        NA fema… femin… <NA>   \n 8 Poe Dameron     NA    NA brown   light   brown        NA male  mascu… <NA>   \n 9 BB8             NA    NA none    none    black        NA none  mascu… <NA>   \n10 Captain Ph…     NA    NA unknown unknown unknown      NA <NA>  <NA>   <NA>   \n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n\nstarwars <- starwars %>% \n  mutate(homeworld = replace_na(homeworld, \"Unknown\")) %>%\n  filter(homeworld %in% c(\"Naboo\", \"Tatooine\", \"Unknown\")) %>%\n  drop_na(height) %>% \n  mutate(name = factor(name)) %>% \n  mutate(name = fct_reorder(name, height)) %>% \n  mutate(name = fct_reorder(name, homeworld))\n\nggplot(starwars, mapping = aes(x = height, y = name, fill = homeworld)) +\n  geom_bar(stat = \"identity\") +\n  xlab(\"Character Height (in inches)\") +\n  ylab(\"Character\") +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\"),\n                    guide = guide_legend(reverse = TRUE),\n                    name = \"Homeworld\") +\n  theme_minimal()"
  },
  {
    "objectID": "dispatches/data-visualization/order-by-multiple-variables.html#setup",
    "href": "dispatches/data-visualization/order-by-multiple-variables.html#setup",
    "title": "Ordering a ggplot2 barplot by multiple variables",
    "section": "Setup",
    "text": "Setup\nWe will be using the Palmer Penguins dataset for this dispatch. To install the Palmer Penguins package, run install.packages(\"palmerpenguins\").\nIf you have not already installed ggplot2, do so with install.packages(\"ggplot2\"), or install the entire tidyverse with install.packages(\"tidyverse\").\n\nLoad the Data\nNow load our two libraries:\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\n\nExplore the Data\nWe are using the palmerpenguins package for our data during this dispatch. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The data were conveniently collected as an R package that we use today.\n\nWe can get a sense of the contents of our data by looking at the first few rows of our tibble. Remember tibbles are data.frames, just with a few behavioral changes. The palmerpenguins data is in a tibble format by default.\n\ndata(package = 'palmerpenguins')\n\n# Remove rows that contain at least one missing value\npenguins <- penguins %>%\n            drop_na()\n\nprint(penguins)\n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 5 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 6 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 7 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 8 Adelie  Torgersen           41.1          17.6        182    3200 fema…  2007\n 9 Adelie  Torgersen           38.6          21.2        191    3800 male   2007\n10 Adelie  Torgersen           34.6          21.1        198    4400 male   2007\n# … with 323 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "dispatches/data-visualization/order-by-multiple-variables.html#themes",
    "href": "dispatches/data-visualization/order-by-multiple-variables.html#themes",
    "title": "Ordering a ggplot2 barplot by multiple variables",
    "section": "Themes",
    "text": "Themes\nLet’s look at a few themes before we build our own. We can use these themes as a starting place.\n\nDefault theme\nThe default theme is theme_gray(). This is the theme that is used when you call ggplot without specifying a theme.\nWhen we compare penguin flipper length to penguin body mass by species the plot created uses theme_gray():\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\")\n\n\n\n\nWe can explicitly add the theme and see that nothing changes:\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_grey()\n\n\n\n\n\n\nChanging theme\nBut if we change the theme, we see our scatter plot change accordingly. Let’s use theme_minimal():\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_minimal()\n\n\n\n\n\n\nAvailable themes\nThere are a number of themes available in ggplot2:\n\n\n\n\n\n\n\nTheme\nDescription\n\n\n\n\ntheme_gray()\nThe signature ggplot2 theme with a grey background and white gridlines, designed to put the data forward yet make comparisons easy.\n\n\ntheme_bw()\nThe classic dark-on-light ggplot2 theme. May work better for presentations displayed with a projector.\n\n\ntheme_linedraw()\nA theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. Serves a purpose similar to theme_bw(). Note that this theme has some very thin lines (<< 1 pt) which some journals may refuse.\n\n\ntheme_light()\nA theme similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data.\n\n\ntheme_dark()\nThe dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin coloured lines pop out.\n\n\ntheme_minimal()\nA minimalistic theme with no background annotations.\n\n\ntheme_classic()\nA classic-looking theme, with x and y axis lines and no gridlines.\n\n\ntheme_void()\nA completely empty theme.\n\n\ntheme_test()\nA theme for visual unit tests. It should ideally never change except for new features."
  },
  {
    "objectID": "dispatches/data-visualization/order-by-multiple-variables.html#customizing-a-theme",
    "href": "dispatches/data-visualization/order-by-multiple-variables.html#customizing-a-theme",
    "title": "Ordering a ggplot2 barplot by multiple variables",
    "section": "Customizing a theme",
    "text": "Customizing a theme\nEach of the previous theme changes different aesthetics of the theme. We can specify our own using a custom theme. For a list of parameters that we can change, check out the theme help with ?theme or review the documentation on ggplot2 theming:\n\n\n\n\n\nUnderstanding theme contents\nLet’s look at the theme_minimal() function, and see what arguments are defined for the different theme parameters:\n\ntheme_minimal\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    theme_bw(base_size = base_size, base_family = base_family, \n        base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% \n        theme(axis.ticks = element_blank(), legend.background = element_blank(), \n            legend.key = element_blank(), panel.background = element_blank(), \n            panel.border = element_blank(), strip.background = element_blank(), \n            plot.background = element_blank(), complete = TRUE)\n}\n<bytecode: 0x000002637f5a7cb0>\n<environment: namespace:ggplot2>\n\n\nInteresting! We can see that theme_minimal() just builds on and modifies theme_bw().\nWhat would we find if we look at theme_bw()?\n\ntheme_bw\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    theme_grey(base_size = base_size, base_family = base_family, \n        base_line_size = base_line_size, base_rect_size = base_rect_size) %+replace% \n        theme(panel.background = element_rect(fill = \"white\", \n            colour = NA), panel.border = element_rect(fill = NA, \n            colour = \"grey20\"), panel.grid = element_line(colour = \"grey92\"), \n            panel.grid.minor = element_line(size = rel(0.5)), \n            strip.background = element_rect(fill = \"grey85\", \n                colour = \"grey20\"), legend.key = element_rect(fill = \"white\", \n                colour = NA), complete = TRUE)\n}\n<bytecode: 0x000002637f5a6778>\n<environment: namespace:ggplot2>\n\n\ntheme_bw() builds on and modifies theme_grey(). Clearly a pattern is emerging where each ggplot2 theme modifies and builds on another.\nAnd what if we keep going down the rabbit hole and look at theme_grey()?\n\ntheme_grey\n\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \n    base_rect_size = base_size/22) \n{\n    half_line <- base_size/2\n    t <- theme(line = element_line(colour = \"black\", size = base_line_size, \n        linetype = 1, lineend = \"butt\"), rect = element_rect(fill = \"white\", \n        colour = \"black\", size = base_rect_size, linetype = 1), \n        text = element_text(family = base_family, face = \"plain\", \n            colour = \"black\", size = base_size, lineheight = 0.9, \n            hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), \n            debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, \n        axis.line.y = NULL, axis.text = element_text(size = rel(0.8), \n            colour = \"grey30\"), axis.text.x = element_text(margin = margin(t = 0.8 * \n            half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * \n            half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * \n            half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * \n            half_line/2), hjust = 0), axis.ticks = element_line(colour = \"grey20\"), \n        axis.ticks.length = unit(half_line/2, \"pt\"), axis.ticks.length.x = NULL, \n        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, \n        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, \n        axis.ticks.length.y.right = NULL, axis.title.x = element_text(margin = margin(t = half_line/2), \n            vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line/2), \n            vjust = 0), axis.title.y = element_text(angle = 90, \n            margin = margin(r = half_line/2), vjust = 1), axis.title.y.right = element_text(angle = -90, \n            margin = margin(l = half_line/2), vjust = 0), legend.background = element_rect(colour = NA), \n        legend.spacing = unit(2 * half_line, \"pt\"), legend.spacing.x = NULL, \n        legend.spacing.y = NULL, legend.margin = margin(half_line, \n            half_line, half_line, half_line), legend.key = element_rect(fill = \"grey95\", \n            colour = NA), legend.key.size = unit(1.2, \"lines\"), \n        legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), \n        legend.text.align = NULL, legend.title = element_text(hjust = 0), \n        legend.title.align = NULL, legend.position = \"right\", \n        legend.direction = NULL, legend.justification = \"center\", \n        legend.box = NULL, legend.box.margin = margin(0, 0, 0, \n            0, \"cm\"), legend.box.background = element_blank(), \n        legend.box.spacing = unit(2 * half_line, \"pt\"), panel.background = element_rect(fill = \"grey92\", \n            colour = NA), panel.border = element_blank(), panel.grid = element_line(colour = \"white\"), \n        panel.grid.minor = element_line(size = rel(0.5)), panel.spacing = unit(half_line, \n            \"pt\"), panel.spacing.x = NULL, panel.spacing.y = NULL, \n        panel.ontop = FALSE, strip.background = element_rect(fill = \"grey85\", \n            colour = NA), strip.text = element_text(colour = \"grey10\", \n            size = rel(0.8), margin = margin(0.8 * half_line, \n                0.8 * half_line, 0.8 * half_line, 0.8 * half_line)), \n        strip.text.x = NULL, strip.text.y = element_text(angle = -90), \n        strip.text.y.left = element_text(angle = 90), strip.placement = \"inside\", \n        strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(half_line/2, \n            \"pt\"), strip.switch.pad.wrap = unit(half_line/2, \n            \"pt\"), plot.background = element_rect(colour = \"white\"), \n        plot.title = element_text(size = rel(1.2), hjust = 0, \n            vjust = 1, margin = margin(b = half_line)), plot.title.position = \"panel\", \n        plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)), \n        plot.caption = element_text(size = rel(0.8), hjust = 1, \n            vjust = 1, margin = margin(t = half_line)), plot.caption.position = \"panel\", \n        plot.tag = element_text(size = rel(1.2), hjust = 0.5, \n            vjust = 0.5), plot.tag.position = \"topleft\", plot.margin = margin(half_line, \n            half_line, half_line, half_line), complete = TRUE)\n    ggplot_global$theme_all_null %+replace% t\n}\n<bytecode: 0x0000026378bbb678>\n<environment: namespace:ggplot2>\n\n\nWe have reached the bottom of the rabbit hole with theme_grey(). This theme explicitly specifies all of the theme arguments (of which there are many).\n\nThis explains why all of the other themes build on each other, it is much more concise to only use a theme where all the arguments are already defined, and only change those theme arguments that you want to look different than the theme you are building on.\n\n\nCopying and modifying a theme\nLet’s begin to build a custom theme, and explore different arguments as we do. First lets create a new theme, theme_custom(), that is simply a wrapper to theme minimal:\n\ntheme_custom <- function()\n{\n  theme_minimal()\n}\n\nWe can call our theme:\n\nggplot(data = penguins, aes(x = body_mass_g,\n                            y = flipper_length_mm,\n                            color = species)) +\n  geom_point() +\n  xlab(\"Body Mass (g)\") +\n  ylab(\"Flipper Length (mm)\") +\n  theme_custom()\n\n\n\n\nAnd we see that we get the same output as when we use theme_minimal()."
  },
  {
    "objectID": "dispatches/data-access/us-census-acs.html",
    "href": "dispatches/data-access/us-census-acs.html",
    "title": "US Census API in R with tidycensus",
    "section": "",
    "text": "R conveniently has a number of packages designed to simplify access to the US Census API.\nFor this dispatch, we will review tidycensus, an R package that allows you to interface with a subset of the US Census Bureau’s APIs and return tidyverse-ready data frames."
  },
  {
    "objectID": "dispatches/data-access/managing-secrets.html",
    "href": "dispatches/data-access/managing-secrets.html",
    "title": "Managing Secrets",
    "section": "",
    "text": "To use an application programming interface, or API, you will need an API key."
  },
  {
    "objectID": "dispatches/data-access/managing-secrets.html#what-is-an-api-key",
    "href": "dispatches/data-access/managing-secrets.html#what-is-an-api-key",
    "title": "Managing Secrets",
    "section": "What is an API Key?",
    "text": "What is an API Key?\nAn API key is a unique code used to identify and authenticate a user or application when interacting with an API.\nAPI keys are generally a string of alphanumeric characters, and look something like this:\nzaCELgL0imfnc8mVLWwsAawjYr4RxAf50DDqtlx\nAPI keys are a security measure to make sure you, or your application, are who you say you are.\nThink of it like an ID card. You wouldn’t want to leave your ID card laying around, and you don’t want to leave your API key laying around either. Anyone could just pick it up and pretend they are you!\nSince API keys are plain text, if API keys are stored in your code, when you share your code, such as on GitHub, they will be readable by everyone that has access to that GitHub repository.\nConsider this R code below that retrieves data from the US decennial census:\n\nlibrary(tidycensus)\nlibrary(tidyverse)\n\ncensus_api_key(\"zaCELgL0imfnc8mVLWwsAawjYr4RxAf50DDqtl\")\n\n# Retrieve median age by sex (P13_001N) by state\nage_2020 <- get_decennial(geography = \"state\", \n                       variables = \"P13_001N\", \n                       year = 2020,\n                       sumfile = \"dhc\")\n\nThe API key is stored in plain-text as a variable. If this code were shared, anyone would be able to use the API key."
  },
  {
    "objectID": "dispatches/data-access/managing-secrets.html#how-do-we-protect-api-keys",
    "href": "dispatches/data-access/managing-secrets.html#how-do-we-protect-api-keys",
    "title": "Managing Secrets",
    "section": "How do we protect API keys?",
    "text": "How do we protect API keys?\n\nWe need some way of using an API key in our code without making it shareable.\nThere are a number of ways we can accomplish this, but this dispatch will focus on one way that is both platform agnostic (works on Mac, Windows, and Linux) and works in most programming languages; environment variables.\n\nEnvironment Variables\nA variable allows us to store information, and an environment is the system we execute our code on. Environment variables allow us to store information specific to a system in variables. Environment variables are not stored within our codebase, but are instead stored in a system specific configuration file.\nWe can use the environment variables configuration file to store our API key, and reference the configuration file in our code in order to load the API key.\n\nEnvironment Variables in R\nIn R, environment variables can be stored in a text file with name-value pairs. Create a file in your home directory by running:\n\nfile.edit(\"~/.Renviron\")\n\nUsing the API key listed earlier, we would declare an environment variable in our .Renviron file:\n\nAPI_KEY = \"zaCELgL0imfnc8mVLWwsAawjYr4RxAf50DDqtlx\"\n\nNow we can update our code to retrieve our API environment variable:\n\nlibrary(tidycensus)\nlibrary(tidyverse)\n\n# Retrieve API key from .Renviron file\napi_key <- Sys.getenv(\"API_KEY\")\ncensus_api_key(api_key)\n\n# Retrieve median age by sex (P13_001N) by state\nage_2020 <- get_decennial(geography = \"state\", \n                       variables = \"P13_001N\", \n                       year = 2020,\n                       sumfile = \"dhc\")\n\nOur API key is now secret, and will not be shared with our codebase!"
  }
]